apiVersion: v1
kind: Service
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: ""
  name: thanos-querier-example-coo-thanos
  namespace: project-c
spec:
  ports:
  - name: proxy
    port: 8888
    protocol: TCP
    targetPort: oauth-proxy
  selector:
    app.kubernetes.io/instance: thanos-querier-example-coo-thanos
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: ""
  labels:
    app.kubernetes.io/instance: thanos-querier-example-coo-thanos
    app.kubernetes.io/managed-by: observability-operator
    app.kubernetes.io/part-of: ThanosQuerier
  name: thanos-querier-example-coo-thanos
  namespace: project-c
spec:
  progressDeadlineSeconds: 300
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: thanos-querier-example-coo-thanos
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: thanos-querier-example-coo-thanos
        app.kubernetes.io/managed-by: observability-operator
        app.kubernetes.io/part-of: ThanosQuerier
      name: thanos-querier-example-coo-thanos
      namespace: project-c
    spec:
      containers:
      - args:
        - -provider=openshift
        - -https-address=:8888
        - -http-address=
        - -email-domain=*
        - -upstream=http://localhost:10902
        - -tls-cert=/etc/tls/private/tls.crt
        - -tls-key=/etc/tls/private/tls.key
        - -cookie-secret-file=/etc/proxy/secrets/session_secret
        - -openshift-service-account=thanos-querier
        - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        - -skip-auth-regex=^/metrics
        - -openshift-sar={"resource":"namespaces","resourceName":"thanos-querier","namespace":"project-c","verb":"get"}
        image: quay.io/openshift/origin-oauth-proxy:4.19
        imagePullPolicy: IfNotPresent
        name: oauth-proxy
        ports:
        - containerPort: 8888
          name: oauth-proxy
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/tls/private
          name: secret-thanos-tls
        - mountPath: /etc/proxy/secrets
          name: secret-thanos-proxy
      - args:
        - query
        - --log.format=logfmt
        - --query.replica-label=prometheus_replica
        - --query.auto-downsampling
        - --endpoint=dnssrv+_grpc._tcp.example-coo-monitoring-stack-thanos-sidecar.ns1-coo.svc.cluster.local
        image: registry.redhat.io/cluster-observability-operator/thanos-rhel9@sha256:f3806c97420ec8ba91895ce7627df7612cccb927c05d7854377f45cdd6c924a8
        imagePullPolicy: IfNotPresent
        name: thanos-querier
        ports:
        - containerPort: 10902
          name: metrics
          protocol: TCP
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccount: thanos-querier
      serviceAccountName: thanos-querier
      terminationGracePeriodSeconds: 30
      volumes:
      - name: secret-thanos-tls
        secret:
          defaultMode: 420
          secretName: thanos-tls
      - name: secret-thanos-proxy
        secret:
          defaultMode: 420
          secretName: thanos-proxy
